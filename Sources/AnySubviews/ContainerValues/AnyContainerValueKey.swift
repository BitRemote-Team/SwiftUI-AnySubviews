//
//  AnyContainerValueKey.swift
//  AnySubviews
//
//  Created by Lumisilk on 2024/08/03.
//
import SwiftUI

public extension View {
    /// Sets a particular container value of a view.
    /// - Parameters:
    ///   - keyPath: A key path that indicates the property of the AnyContainerValues structure to update. Use `#AnyEntry` macro in `AnyContainerValueKeys`'s extension to generate a key.
    ///   - value: The new value to set for the item specified by keyPath.
    /// - Returns: A view that has the given value set in its containerValues.
    @ViewBuilder
    func anyContainerValue<Key: AnyContainerValueKey>(keyPath: KeyPath<AnyContainerValueKeys, Key.Type>, _ value: Key.Value) -> some View {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            containerValue(Key.self.containerKeyPath, value)
        } else {
            _trait(Key.self, value)
        }
    }
}

/// Do not use or conform to `_AnyContainerValueKey` directly. It's used by `#AnyEntry` macro exclusively.
public protocol AnyContainerValueKey: _ViewTraitKey {
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    static var containerKeyPath: WritableKeyPath<ContainerValues, Value> { get }
}

/// A namespace for keys generated by `#AnyEntry` macro.
public struct AnyContainerValueKeys {}

@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public extension ContainerValues {
    /// Do not use this property directly. It's used by `AnyEntry` Macro exclusively.
    var delegate: ContainerValuesDelegate {
        get { ContainerValuesDelegate(values: self) }
        set { self = newValue.values }
    }
}

/// Do not use `ContainerValuesDelegate` directly. It's used by `#AnyEntry` macro exclusively.
@dynamicMemberLookup
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ContainerValuesDelegate {
    var values: ContainerValues
    
    public subscript<Key: ContainerValueKey>(dynamicMember keyPath: KeyPath<AnyContainerValueKeys, Key.Type>) -> Key.Value {
        get { values[Key.self] }
        set { values[Key.self] = newValue }
    }
}
